<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.se.dao.BusinessEmployeeDao">
	<resultMap type="com.se.entity.BusinessEmployee" id="BusinessEmployeeRM">
		<id column="id" property="id" />
		<result column="employeeid" property="employeeid" />
		<result column="window" property="window" />
		<result column="businessid" property="businessid" />
		<result column="createdon" property="createdon" />
	</resultMap>
	<!-- _____________________________________________________________________________ 全部字段 -->
	<sql id="COLUMNS">
		id,employeeid,window,businessid,createdon
	</sql>

	<!-- _____________________________________________________________________________ 1.add -->

	<insert id="add" parameterType="com.se.entity.BusinessEmployee">
		insert into se_business_employee (id,employeeid,window,businessid,createdon)
		values (#{id},#{employeeid},#{window},#{businessid},#{createdon})
	</insert>

	<!-- ______________________________________________________________________________ 2.modify -->

	<update id="modify" parameterType="com.se.entity.BusinessEmployee">
		update se_business_employee 
		<set>
			<if test="employeeid != null">employeeid = #{employeeid},</if>
			<if test="window != null">window = #{window},</if>
			<if test="businessid != null">businessid = #{businessid},</if>
			<if test="createdon != null">createdon = #{createdon}</if>
		</set>
		where id = #{id}
	</update>

	<!-- _____________________________________________________________________________ 3.removeById -->

	<delete id="removeById" parameterType="string">
		delete from se_business_employee where id=#{id} 
	</delete>

	<!-- _____________________________________________________________________________ 4.removeByIds -->

	<delete id="removeByIds" parameterType="List">
		delete from se_business_employee where id in 
		<foreach collection = "list" index="index"  item="id" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

	<!-- _____________________________________________________________________________ 5.listAll -->

	<select id="listAll" resultMap="BusinessEmployeeRM">
		select <include refid="COLUMNS" /> from se_business_employee
	</select>

	<!-- _____________________________________________________________________________ 6.listBy -->

	<select id="listBy" parameterType="map" resultMap="BusinessEmployeeRM">
		select <include refid="COLUMNS" /> from se_business_employee
		<where>
			<if test="id != null">and id = #{id}</if>
			<if test="employeeid != null">and employeeid = #{employeeid}</if>
			<if test="window != null">and window = #{window}</if>
			<if test="businessid != null">and businessid = #{businessid}</if>
			<if test="createdon != null">and createdon = #{createdon}</if>
		</where>
	</select>

	<!-- _____________________________________________________________________________ 7.pageBy -->

	<select id="pageBy" parameterType="map" resultMap="BusinessEmployeeRM">
		select <include refid="COLUMNS" /> from se_business_employee
		<where>
			<if test="id != null">and id = #{id}</if>
			<if test="employeeid != null">and employeeid = #{employeeid}</if>
			<if test="window != null">and window = #{window}</if>
			<if test="businessid != null">and businessid = #{businessid}</if>
			<if test="createdon != null">and createdon = #{createdon}</if>
		</where>
		order by id desc
		limit #{startIdx},#{limit}
	</select>

    <!-- _____________________________________________________________________________ 8.findByMap -->

	<select id="findByMap" parameterType="map" resultMap="BusinessEmployeeRM">
		select <include refid="COLUMNS" /> from se_business_employee
		<where>
			<if test="id != null">and id = #{id}</if>
			<if test="employeeid != null">and employeeid = #{employeeid}</if>
			<if test="window != null">and window = #{window}</if>
			<if test="businessid != null">and businessid = #{businessid}</if>
			<if test="createdon != null">and createdon = #{createdon}</if>
		</where>
	</select>
	
	<!-- _____________________________________________________________________________ 8.findBy -->

	<select id="findBy" parameterType="com.se.entity.BusinessEmployee" resultMap="BusinessEmployeeRM">
		select <include refid="COLUMNS" /> from se_business_employee
		<where>
			<if test="id != null">and id = #{id}</if>
			<if test="employeeid != null">and employeeid = #{employeeid}</if>
			<if test="window != null">and window = #{window}</if>
			<if test="businessid != null">and businessid = #{businessid}</if>
			<if test="createdon != null">and createdon = #{createdon}</if>
		</where>
	</select>

	<!-- _____________________________________________________________________________ 9.findById -->

	<select id="findById" parameterType="string" resultMap="BusinessEmployeeRM">
		select <include refid="COLUMNS" /> from se_business_employee where id = #{id}
	</select>

	<!-- _____________________________________________________________________________ 10.countAll -->

	<select id="countAll" resultType="integer">
		select count(id) from se_business_employee
	</select>

	<!-- _____________________________________________________________________________ 11.countBy -->

	<select id="countBy" parameterType="map" resultType="integer">
		select count(id) from se_business_employee
		<where>
			<if test="id != null">and id = #{id}</if>
			<if test="employeeid != null">and employeeid = #{employeeid}</if>
			<if test="window != null">and window = #{window}</if>
			<if test="businessid != null">and businessid = #{businessid}</if>
			<if test="createdon != null">and createdon = #{createdon}</if>
		</where>
	</select>
	<!-- ******************扩展Mapper****************** -->
	 
</mapper>
